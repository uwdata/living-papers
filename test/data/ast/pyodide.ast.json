{
  "metadata": {
    "plugins": {
      "pyodide": {
        "micropip": [
          "altair",
          "vega_datasets"
        ]
      }
    },
    "title": "Python Pyodide Integration"
  },
  "article": {
    "type": "component",
    "name": "article",
    "children": [
      {
        "type": "component",
        "name": "codeblock",
        "properties": {
          "class": {
            "type": "value",
            "value": "py"
          },
          "hide": {
            "type": "value",
            "value": "true"
          }
        },
        "children": [
          {
            "type": "textnode",
            "value": "import sys"
          }
        ]
      },
      {
        "type": "component",
        "name": "p",
        "children": [
          {
            "type": "textnode",
            "value": "Python version "
          },
          {
            "type": "component",
            "name": "code",
            "properties": {
              "class": {
                "type": "value",
                "value": "bold"
              }
            },
            "children": [
              {
                "type": "textnode",
                "value": "py ${sys}.version"
              }
            ]
          }
        ]
      },
      {
        "type": "component",
        "name": "codeblock",
        "properties": {
          "class": {
            "type": "value",
            "value": "py"
          }
        },
        "children": [
          {
            "type": "textnode",
            "value": "import altair as alt\nfrom vega_datasets import data\ncars = data.cars.url\n\nchart = alt.Chart(cars).mark_point().encode(\n  x='Horsepower:Q',\n  y='Miles_per_Gallon:Q',\n  color='Origin:N',\n).interactive()\nchart"
          }
        ]
      },
      {
        "type": "component",
        "name": "figure",
        "properties": {
          "class": {
            "type": "value",
            "value": "figure"
          }
        },
        "children": [
          {
            "type": "component",
            "name": "codeblock",
            "properties": {
              "class": {
                "type": "value",
                "value": "js"
              }
            },
            "children": [
              {
                "type": "textnode",
                "value": "vl.spec(JSON.parse(chart.to_json())).render()"
              }
            ]
          },
          {
            "type": "component",
            "name": "caption",
            "children": [
              {
                "type": "textnode",
                "value": "Miles per gallon as a function of horsepower. (Altair + Vega-Lite)"
              }
            ]
          }
        ]
      },
      {
        "type": "component",
        "name": "codeblock",
        "properties": {
          "class": {
            "type": "value",
            "value": "py"
          },
          "hide": {
            "type": "value",
            "value": "true"
          }
        },
        "children": [
          {
            "type": "textnode",
            "value": "import numpy as np\n~~~\nfrom matplotlib import pyplot as plt\nimport types\nimport io\nimport base64\nfrom js import document\n\ndef png(self):\n  buf = io.BytesIO()\n  self.savefig(buf, format='png')\n  buf.seek(0)\n  img_str = 'data:image/png;base64,' + base64.b64encode(buf.read()).decode('UTF-8')\n  el = document.createElement('img')\n  el.src = img_str\n  return el\n\ndef svg(self):\n  buf = io.BytesIO()\n  self.savefig(buf, format='svg')\n  buf.seek(0)\n  div = document.createElement('div')\n  div.innerHTML = buf.getvalue().decode('UTF-8')\n  return div.querySelector('svg')\n\nplt._show = types.MethodType(plt.show, plt)\nplt.show = types.MethodType(png, plt)\nplt.png = types.MethodType(png, plt)\nplt.svg = types.MethodType(svg, plt)\nplt"
          }
        ]
      },
      {
        "type": "component",
        "name": "figure",
        "properties": {
          "class": {
            "type": "value",
            "value": "figure"
          }
        },
        "children": [
          {
            "type": "component",
            "name": "codeblock",
            "properties": {
              "class": {
                "type": "value",
                "value": "js"
              }
            },
            "children": [
              {
                "type": "textnode",
                "value": "x = np.linspace(0, sx * np.pi, 300)\n---\n{\n  plt.figure();\n  plt.plot(x, np.sin(x));\n  const svg = plt.svg();\n  return (plt.close(), svg);\n}"
              }
            ]
          },
          {
            "type": "component",
            "name": "codeblock",
            "properties": {
              "class": {
                "type": "value",
                "value": "js"
              }
            },
            "children": [
              {
                "type": "textnode",
                "value": "viewof sx = Inputs.range([2, 20], { step: 0.1, value: 10 })"
              }
            ]
          },
          {
            "type": "component",
            "name": "caption",
            "children": [
              {
                "type": "textnode",
                "value": "Surfing on sinusoids! (Matplotlib + Observable)"
              }
            ]
          }
        ]
      }
    ]
  }
}